/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export declare namespace AintiVirusMixer {
  export type DepositProofStruct = {
    pA: [BigNumberish, BigNumberish];
    pB: [[BigNumberish, BigNumberish], [BigNumberish, BigNumberish]];
    pC: [BigNumberish, BigNumberish];
    pubSignals: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ];
  };

  export type DepositProofStructOutput = [
    pA: [bigint, bigint],
    pB: [[bigint, bigint], [bigint, bigint]],
    pC: [bigint, bigint],
    pubSignals: [bigint, bigint, bigint, bigint, bigint]
  ] & {
    pA: [bigint, bigint];
    pB: [[bigint, bigint], [bigint, bigint]];
    pC: [bigint, bigint];
    pubSignals: [bigint, bigint, bigint, bigint, bigint];
  };

  export type WithdrawalProofStruct = {
    pA: [BigNumberish, BigNumberish];
    pB: [[BigNumberish, BigNumberish], [BigNumberish, BigNumberish]];
    pC: [BigNumberish, BigNumberish];
    pubSignals: BigNumberish[];
  };

  export type WithdrawalProofStructOutput = [
    pA: [bigint, bigint],
    pB: [[bigint, bigint], [bigint, bigint]],
    pC: [bigint, bigint],
    pubSignals: bigint[]
  ] & {
    pA: [bigint, bigint];
    pB: [[bigint, bigint], [bigint, bigint]];
    pC: [bigint, bigint];
    pubSignals: bigint[];
  };
}

export interface AintiVirusMixerInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "DEFAULT_ADMIN_ROLE"
      | "FIELD_SIZE"
      | "OPERATOR_ROLE"
      | "ROOT_HISTORY_SIZE"
      | "TREE_DEPTH"
      | "ZERO_VALUE"
      | "addCommitmentForEthWithdrawal"
      | "currentRootIndexETH"
      | "currentRootIndexSOL"
      | "deposit"
      | "depositVerifier"
      | "ethKnownCommitments"
      | "ethUsedNullifiers"
      | "fee"
      | "filledSubtreesETH"
      | "filledSubtreesSOL"
      | "getLastETHRoot"
      | "getLastSOLRoot"
      | "getRoleAdmin"
      | "grantRole"
      | "hasRole"
      | "hasher"
      | "isKnownETHRoot"
      | "isKnownSOLRoot"
      | "levels"
      | "nextIndexETH"
      | "nextIndexSOL"
      | "refund"
      | "relayer"
      | "renounceRole"
      | "revertNullifierForSolWithdrawal"
      | "revokeRole"
      | "rootsETH"
      | "rootsSOL"
      | "setNullifierForSolWithdrawal"
      | "solKnownCommitments"
      | "solUsedNullifiers"
      | "supportsInterface"
      | "verifier"
      | "verifySolWithdrawal"
      | "withdraw"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "CommitmentAddedForEthWithdrawal"
      | "DepositForSolWithdrawal"
      | "LeafInsertedETH"
      | "LeafInsertedSOL"
      | "RoleAdminChanged"
      | "RoleGranted"
      | "RoleRevoked"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "FIELD_SIZE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "OPERATOR_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ROOT_HISTORY_SIZE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "TREE_DEPTH",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ZERO_VALUE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addCommitmentForEthWithdrawal",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "currentRootIndexETH",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "currentRootIndexSOL",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "deposit",
    values: [
      AddressLike,
      BigNumberish,
      BytesLike,
      AintiVirusMixer.DepositProofStruct
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "depositVerifier",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ethKnownCommitments",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "ethUsedNullifiers",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "fee", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "filledSubtreesETH",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "filledSubtreesSOL",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getLastETHRoot",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getLastSOLRoot",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "hasher", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "isKnownETHRoot",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isKnownSOLRoot",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "levels", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "nextIndexETH",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "nextIndexSOL",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "refund", values?: undefined): string;
  encodeFunctionData(functionFragment: "relayer", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "revertNullifierForSolWithdrawal",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "rootsETH",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "rootsSOL",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setNullifierForSolWithdrawal",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "solKnownCommitments",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "solUsedNullifiers",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "verifier", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "verifySolWithdrawal",
    values: [BytesLike, AintiVirusMixer.WithdrawalProofStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [BytesLike, AintiVirusMixer.WithdrawalProofStruct, AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "FIELD_SIZE", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "OPERATOR_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ROOT_HISTORY_SIZE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "TREE_DEPTH", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ZERO_VALUE", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "addCommitmentForEthWithdrawal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "currentRootIndexETH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "currentRootIndexSOL",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "depositVerifier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ethKnownCommitments",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ethUsedNullifiers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "fee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "filledSubtreesETH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "filledSubtreesSOL",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLastETHRoot",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLastSOLRoot",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasher", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isKnownETHRoot",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isKnownSOLRoot",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "levels", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "nextIndexETH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "nextIndexSOL",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "refund", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "relayer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "revertNullifierForSolWithdrawal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "rootsETH", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "rootsSOL", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setNullifierForSolWithdrawal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "solKnownCommitments",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "solUsedNullifiers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "verifier", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "verifySolWithdrawal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
}

export namespace CommitmentAddedForEthWithdrawalEvent {
  export type InputTuple = [
    commitment: BytesLike,
    leafIndex: BigNumberish,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    commitment: string,
    leafIndex: bigint,
    timestamp: bigint
  ];
  export interface OutputObject {
    commitment: string;
    leafIndex: bigint;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DepositForSolWithdrawalEvent {
  export type InputTuple = [
    commitment: BytesLike,
    leafIndex: BigNumberish,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    commitment: string,
    leafIndex: bigint,
    timestamp: bigint
  ];
  export interface OutputObject {
    commitment: string;
    leafIndex: bigint;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LeafInsertedETHEvent {
  export type InputTuple = [
    leaf: BytesLike,
    index: BigNumberish,
    root: BytesLike
  ];
  export type OutputTuple = [leaf: string, index: bigint, root: string];
  export interface OutputObject {
    leaf: string;
    index: bigint;
    root: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LeafInsertedSOLEvent {
  export type InputTuple = [
    leaf: BytesLike,
    index: BigNumberish,
    root: BytesLike
  ];
  export type OutputTuple = [leaf: string, index: bigint, root: string];
  export interface OutputObject {
    leaf: string;
    index: bigint;
    root: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleAdminChangedEvent {
  export type InputTuple = [
    role: BytesLike,
    previousAdminRole: BytesLike,
    newAdminRole: BytesLike
  ];
  export type OutputTuple = [
    role: string,
    previousAdminRole: string,
    newAdminRole: string
  ];
  export interface OutputObject {
    role: string;
    previousAdminRole: string;
    newAdminRole: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleGrantedEvent {
  export type InputTuple = [
    role: BytesLike,
    account: AddressLike,
    sender: AddressLike
  ];
  export type OutputTuple = [role: string, account: string, sender: string];
  export interface OutputObject {
    role: string;
    account: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleRevokedEvent {
  export type InputTuple = [
    role: BytesLike,
    account: AddressLike,
    sender: AddressLike
  ];
  export type OutputTuple = [role: string, account: string, sender: string];
  export interface OutputObject {
    role: string;
    account: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface AintiVirusMixer extends BaseContract {
  connect(runner?: ContractRunner | null): AintiVirusMixer;
  waitForDeployment(): Promise<this>;

  interface: AintiVirusMixerInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  DEFAULT_ADMIN_ROLE: TypedContractMethod<[], [string], "view">;

  FIELD_SIZE: TypedContractMethod<[], [bigint], "view">;

  OPERATOR_ROLE: TypedContractMethod<[], [string], "view">;

  ROOT_HISTORY_SIZE: TypedContractMethod<[], [bigint], "view">;

  TREE_DEPTH: TypedContractMethod<[], [bigint], "view">;

  ZERO_VALUE: TypedContractMethod<[], [bigint], "view">;

  addCommitmentForEthWithdrawal: TypedContractMethod<
    [_commitment: BytesLike],
    [void],
    "nonpayable"
  >;

  currentRootIndexETH: TypedContractMethod<[], [bigint], "view">;

  currentRootIndexSOL: TypedContractMethod<[], [bigint], "view">;

  deposit: TypedContractMethod<
    [
      _currency: AddressLike,
      _amount: BigNumberish,
      _commitment: BytesLike,
      _proof: AintiVirusMixer.DepositProofStruct
    ],
    [void],
    "payable"
  >;

  depositVerifier: TypedContractMethod<[], [string], "view">;

  ethKnownCommitments: TypedContractMethod<
    [arg0: BytesLike],
    [boolean],
    "view"
  >;

  ethUsedNullifiers: TypedContractMethod<[arg0: BytesLike], [bigint], "view">;

  fee: TypedContractMethod<[], [bigint], "view">;

  filledSubtreesETH: TypedContractMethod<
    [arg0: BigNumberish],
    [string],
    "view"
  >;

  filledSubtreesSOL: TypedContractMethod<
    [arg0: BigNumberish],
    [string],
    "view"
  >;

  getLastETHRoot: TypedContractMethod<[], [string], "view">;

  getLastSOLRoot: TypedContractMethod<[], [string], "view">;

  getRoleAdmin: TypedContractMethod<[role: BytesLike], [string], "view">;

  grantRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  hasRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [boolean],
    "view"
  >;

  hasher: TypedContractMethod<[], [string], "view">;

  isKnownETHRoot: TypedContractMethod<[_root: BytesLike], [boolean], "view">;

  isKnownSOLRoot: TypedContractMethod<[_root: BytesLike], [boolean], "view">;

  levels: TypedContractMethod<[], [bigint], "view">;

  nextIndexETH: TypedContractMethod<[], [bigint], "view">;

  nextIndexSOL: TypedContractMethod<[], [bigint], "view">;

  refund: TypedContractMethod<[], [bigint], "view">;

  relayer: TypedContractMethod<[], [string], "view">;

  renounceRole: TypedContractMethod<
    [role: BytesLike, callerConfirmation: AddressLike],
    [void],
    "nonpayable"
  >;

  revertNullifierForSolWithdrawal: TypedContractMethod<
    [_nullifierHash: BytesLike],
    [void],
    "nonpayable"
  >;

  revokeRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  rootsETH: TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  rootsSOL: TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  setNullifierForSolWithdrawal: TypedContractMethod<
    [_nullifierHash: BytesLike],
    [void],
    "nonpayable"
  >;

  solKnownCommitments: TypedContractMethod<
    [arg0: BytesLike],
    [boolean],
    "view"
  >;

  solUsedNullifiers: TypedContractMethod<[arg0: BytesLike], [bigint], "view">;

  supportsInterface: TypedContractMethod<
    [interfaceId: BytesLike],
    [boolean],
    "view"
  >;

  verifier: TypedContractMethod<[], [string], "view">;

  verifySolWithdrawal: TypedContractMethod<
    [_root: BytesLike, _proof: AintiVirusMixer.WithdrawalProofStruct],
    [boolean],
    "nonpayable"
  >;

  withdraw: TypedContractMethod<
    [
      _root: BytesLike,
      _proof: AintiVirusMixer.WithdrawalProofStruct,
      _recipient: AddressLike
    ],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "DEFAULT_ADMIN_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "FIELD_SIZE"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "OPERATOR_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "ROOT_HISTORY_SIZE"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "TREE_DEPTH"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "ZERO_VALUE"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "addCommitmentForEthWithdrawal"
  ): TypedContractMethod<[_commitment: BytesLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "currentRootIndexETH"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "currentRootIndexSOL"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "deposit"
  ): TypedContractMethod<
    [
      _currency: AddressLike,
      _amount: BigNumberish,
      _commitment: BytesLike,
      _proof: AintiVirusMixer.DepositProofStruct
    ],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "depositVerifier"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "ethKnownCommitments"
  ): TypedContractMethod<[arg0: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "ethUsedNullifiers"
  ): TypedContractMethod<[arg0: BytesLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "fee"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "filledSubtreesETH"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "filledSubtreesSOL"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "getLastETHRoot"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getLastSOLRoot"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getRoleAdmin"
  ): TypedContractMethod<[role: BytesLike], [string], "view">;
  getFunction(
    nameOrSignature: "grantRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "hasRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "hasher"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "isKnownETHRoot"
  ): TypedContractMethod<[_root: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "isKnownSOLRoot"
  ): TypedContractMethod<[_root: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "levels"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "nextIndexETH"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "nextIndexSOL"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "refund"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "relayer"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "renounceRole"
  ): TypedContractMethod<
    [role: BytesLike, callerConfirmation: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "revertNullifierForSolWithdrawal"
  ): TypedContractMethod<[_nullifierHash: BytesLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "revokeRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "rootsETH"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "rootsSOL"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "setNullifierForSolWithdrawal"
  ): TypedContractMethod<[_nullifierHash: BytesLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "solKnownCommitments"
  ): TypedContractMethod<[arg0: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "solUsedNullifiers"
  ): TypedContractMethod<[arg0: BytesLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "supportsInterface"
  ): TypedContractMethod<[interfaceId: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "verifier"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "verifySolWithdrawal"
  ): TypedContractMethod<
    [_root: BytesLike, _proof: AintiVirusMixer.WithdrawalProofStruct],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "withdraw"
  ): TypedContractMethod<
    [
      _root: BytesLike,
      _proof: AintiVirusMixer.WithdrawalProofStruct,
      _recipient: AddressLike
    ],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "CommitmentAddedForEthWithdrawal"
  ): TypedContractEvent<
    CommitmentAddedForEthWithdrawalEvent.InputTuple,
    CommitmentAddedForEthWithdrawalEvent.OutputTuple,
    CommitmentAddedForEthWithdrawalEvent.OutputObject
  >;
  getEvent(
    key: "DepositForSolWithdrawal"
  ): TypedContractEvent<
    DepositForSolWithdrawalEvent.InputTuple,
    DepositForSolWithdrawalEvent.OutputTuple,
    DepositForSolWithdrawalEvent.OutputObject
  >;
  getEvent(
    key: "LeafInsertedETH"
  ): TypedContractEvent<
    LeafInsertedETHEvent.InputTuple,
    LeafInsertedETHEvent.OutputTuple,
    LeafInsertedETHEvent.OutputObject
  >;
  getEvent(
    key: "LeafInsertedSOL"
  ): TypedContractEvent<
    LeafInsertedSOLEvent.InputTuple,
    LeafInsertedSOLEvent.OutputTuple,
    LeafInsertedSOLEvent.OutputObject
  >;
  getEvent(
    key: "RoleAdminChanged"
  ): TypedContractEvent<
    RoleAdminChangedEvent.InputTuple,
    RoleAdminChangedEvent.OutputTuple,
    RoleAdminChangedEvent.OutputObject
  >;
  getEvent(
    key: "RoleGranted"
  ): TypedContractEvent<
    RoleGrantedEvent.InputTuple,
    RoleGrantedEvent.OutputTuple,
    RoleGrantedEvent.OutputObject
  >;
  getEvent(
    key: "RoleRevoked"
  ): TypedContractEvent<
    RoleRevokedEvent.InputTuple,
    RoleRevokedEvent.OutputTuple,
    RoleRevokedEvent.OutputObject
  >;

  filters: {
    "CommitmentAddedForEthWithdrawal(bytes32,uint32,uint256)": TypedContractEvent<
      CommitmentAddedForEthWithdrawalEvent.InputTuple,
      CommitmentAddedForEthWithdrawalEvent.OutputTuple,
      CommitmentAddedForEthWithdrawalEvent.OutputObject
    >;
    CommitmentAddedForEthWithdrawal: TypedContractEvent<
      CommitmentAddedForEthWithdrawalEvent.InputTuple,
      CommitmentAddedForEthWithdrawalEvent.OutputTuple,
      CommitmentAddedForEthWithdrawalEvent.OutputObject
    >;

    "DepositForSolWithdrawal(bytes32,uint32,uint256)": TypedContractEvent<
      DepositForSolWithdrawalEvent.InputTuple,
      DepositForSolWithdrawalEvent.OutputTuple,
      DepositForSolWithdrawalEvent.OutputObject
    >;
    DepositForSolWithdrawal: TypedContractEvent<
      DepositForSolWithdrawalEvent.InputTuple,
      DepositForSolWithdrawalEvent.OutputTuple,
      DepositForSolWithdrawalEvent.OutputObject
    >;

    "LeafInsertedETH(bytes32,uint32,bytes32)": TypedContractEvent<
      LeafInsertedETHEvent.InputTuple,
      LeafInsertedETHEvent.OutputTuple,
      LeafInsertedETHEvent.OutputObject
    >;
    LeafInsertedETH: TypedContractEvent<
      LeafInsertedETHEvent.InputTuple,
      LeafInsertedETHEvent.OutputTuple,
      LeafInsertedETHEvent.OutputObject
    >;

    "LeafInsertedSOL(bytes32,uint32,bytes32)": TypedContractEvent<
      LeafInsertedSOLEvent.InputTuple,
      LeafInsertedSOLEvent.OutputTuple,
      LeafInsertedSOLEvent.OutputObject
    >;
    LeafInsertedSOL: TypedContractEvent<
      LeafInsertedSOLEvent.InputTuple,
      LeafInsertedSOLEvent.OutputTuple,
      LeafInsertedSOLEvent.OutputObject
    >;

    "RoleAdminChanged(bytes32,bytes32,bytes32)": TypedContractEvent<
      RoleAdminChangedEvent.InputTuple,
      RoleAdminChangedEvent.OutputTuple,
      RoleAdminChangedEvent.OutputObject
    >;
    RoleAdminChanged: TypedContractEvent<
      RoleAdminChangedEvent.InputTuple,
      RoleAdminChangedEvent.OutputTuple,
      RoleAdminChangedEvent.OutputObject
    >;

    "RoleGranted(bytes32,address,address)": TypedContractEvent<
      RoleGrantedEvent.InputTuple,
      RoleGrantedEvent.OutputTuple,
      RoleGrantedEvent.OutputObject
    >;
    RoleGranted: TypedContractEvent<
      RoleGrantedEvent.InputTuple,
      RoleGrantedEvent.OutputTuple,
      RoleGrantedEvent.OutputObject
    >;

    "RoleRevoked(bytes32,address,address)": TypedContractEvent<
      RoleRevokedEvent.InputTuple,
      RoleRevokedEvent.OutputTuple,
      RoleRevokedEvent.OutputObject
    >;
    RoleRevoked: TypedContractEvent<
      RoleRevokedEvent.InputTuple,
      RoleRevokedEvent.OutputTuple,
      RoleRevokedEvent.OutputObject
    >;
  };
}
