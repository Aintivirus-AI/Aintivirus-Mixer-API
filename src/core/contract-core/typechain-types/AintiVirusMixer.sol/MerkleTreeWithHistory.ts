/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface MerkleTreeWithHistoryInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "FIELD_SIZE"
      | "ROOT_HISTORY_SIZE"
      | "TREE_DEPTH"
      | "ZERO_VALUE"
      | "currentRootIndexETH"
      | "currentRootIndexSOL"
      | "filledSubtreesETH"
      | "filledSubtreesSOL"
      | "getLastETHRoot"
      | "getLastSOLRoot"
      | "hasher"
      | "isKnownETHRoot"
      | "isKnownSOLRoot"
      | "levels"
      | "nextIndexETH"
      | "nextIndexSOL"
      | "rootsETH"
      | "rootsSOL"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic: "LeafInsertedETH" | "LeafInsertedSOL"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "FIELD_SIZE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ROOT_HISTORY_SIZE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "TREE_DEPTH",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ZERO_VALUE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "currentRootIndexETH",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "currentRootIndexSOL",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "filledSubtreesETH",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "filledSubtreesSOL",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getLastETHRoot",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getLastSOLRoot",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "hasher", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "isKnownETHRoot",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isKnownSOLRoot",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "levels", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "nextIndexETH",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "nextIndexSOL",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rootsETH",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "rootsSOL",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "FIELD_SIZE", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "ROOT_HISTORY_SIZE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "TREE_DEPTH", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ZERO_VALUE", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "currentRootIndexETH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "currentRootIndexSOL",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "filledSubtreesETH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "filledSubtreesSOL",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLastETHRoot",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLastSOLRoot",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "hasher", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isKnownETHRoot",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isKnownSOLRoot",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "levels", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "nextIndexETH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "nextIndexSOL",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "rootsETH", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "rootsSOL", data: BytesLike): Result;
}

export namespace LeafInsertedETHEvent {
  export type InputTuple = [
    leaf: BytesLike,
    index: BigNumberish,
    root: BytesLike
  ];
  export type OutputTuple = [leaf: string, index: bigint, root: string];
  export interface OutputObject {
    leaf: string;
    index: bigint;
    root: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LeafInsertedSOLEvent {
  export type InputTuple = [
    leaf: BytesLike,
    index: BigNumberish,
    root: BytesLike
  ];
  export type OutputTuple = [leaf: string, index: bigint, root: string];
  export interface OutputObject {
    leaf: string;
    index: bigint;
    root: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface MerkleTreeWithHistory extends BaseContract {
  connect(runner?: ContractRunner | null): MerkleTreeWithHistory;
  waitForDeployment(): Promise<this>;

  interface: MerkleTreeWithHistoryInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  FIELD_SIZE: TypedContractMethod<[], [bigint], "view">;

  ROOT_HISTORY_SIZE: TypedContractMethod<[], [bigint], "view">;

  TREE_DEPTH: TypedContractMethod<[], [bigint], "view">;

  ZERO_VALUE: TypedContractMethod<[], [bigint], "view">;

  currentRootIndexETH: TypedContractMethod<[], [bigint], "view">;

  currentRootIndexSOL: TypedContractMethod<[], [bigint], "view">;

  filledSubtreesETH: TypedContractMethod<
    [arg0: BigNumberish],
    [string],
    "view"
  >;

  filledSubtreesSOL: TypedContractMethod<
    [arg0: BigNumberish],
    [string],
    "view"
  >;

  getLastETHRoot: TypedContractMethod<[], [string], "view">;

  getLastSOLRoot: TypedContractMethod<[], [string], "view">;

  hasher: TypedContractMethod<[], [string], "view">;

  isKnownETHRoot: TypedContractMethod<[_root: BytesLike], [boolean], "view">;

  isKnownSOLRoot: TypedContractMethod<[_root: BytesLike], [boolean], "view">;

  levels: TypedContractMethod<[], [bigint], "view">;

  nextIndexETH: TypedContractMethod<[], [bigint], "view">;

  nextIndexSOL: TypedContractMethod<[], [bigint], "view">;

  rootsETH: TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  rootsSOL: TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "FIELD_SIZE"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "ROOT_HISTORY_SIZE"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "TREE_DEPTH"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "ZERO_VALUE"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "currentRootIndexETH"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "currentRootIndexSOL"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "filledSubtreesETH"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "filledSubtreesSOL"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "getLastETHRoot"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getLastSOLRoot"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "hasher"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "isKnownETHRoot"
  ): TypedContractMethod<[_root: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "isKnownSOLRoot"
  ): TypedContractMethod<[_root: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "levels"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "nextIndexETH"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "nextIndexSOL"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "rootsETH"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "rootsSOL"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  getEvent(
    key: "LeafInsertedETH"
  ): TypedContractEvent<
    LeafInsertedETHEvent.InputTuple,
    LeafInsertedETHEvent.OutputTuple,
    LeafInsertedETHEvent.OutputObject
  >;
  getEvent(
    key: "LeafInsertedSOL"
  ): TypedContractEvent<
    LeafInsertedSOLEvent.InputTuple,
    LeafInsertedSOLEvent.OutputTuple,
    LeafInsertedSOLEvent.OutputObject
  >;

  filters: {
    "LeafInsertedETH(bytes32,uint32,bytes32)": TypedContractEvent<
      LeafInsertedETHEvent.InputTuple,
      LeafInsertedETHEvent.OutputTuple,
      LeafInsertedETHEvent.OutputObject
    >;
    LeafInsertedETH: TypedContractEvent<
      LeafInsertedETHEvent.InputTuple,
      LeafInsertedETHEvent.OutputTuple,
      LeafInsertedETHEvent.OutputObject
    >;

    "LeafInsertedSOL(bytes32,uint32,bytes32)": TypedContractEvent<
      LeafInsertedSOLEvent.InputTuple,
      LeafInsertedSOLEvent.OutputTuple,
      LeafInsertedSOLEvent.OutputObject
    >;
    LeafInsertedSOL: TypedContractEvent<
      LeafInsertedSOLEvent.InputTuple,
      LeafInsertedSOLEvent.OutputTuple,
      LeafInsertedSOLEvent.OutputObject
    >;
  };
}
